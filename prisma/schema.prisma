// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

model Url {
  id       String    @id @default(cuid())
  url      String
  shortUrl String    @unique @map("short_url")
  users    UrlUser[]
  hits     UrlHit[]

  @@map("urls")
}

model UrlHit {
  id     String  @id @default(cuid())
  urlId  String  @map("url_id")
  url    Url     @relation(fields: [urlId], references: [id])

  @@map("url_hits")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  urls          UrlUser[]

  @@map("users")
}

model UrlUser {
  urlId  String @map("url_id")
  userId String @map("user_id")
  url    Url    @relation(fields: [urlId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([urlId, userId])
  @@map("url_user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token") // @db.Text
  access_token      String? @map("access_token") // @db.Text
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token") // @db.Text
  session_state     String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
